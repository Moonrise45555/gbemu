// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var test = Test.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Test
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("initial")]
        public Final Initial { get; set; }

        [JsonProperty("final")]
        public Final Final { get; set; }

        [JsonProperty("cycles")]
        public CycleElement[][] Cycles { get; set; }
    }

    public partial class Final
    {
        [JsonProperty("a")]
        public long A { get; set; }

        [JsonProperty("b")]
        public long B { get; set; }

        [JsonProperty("c")]
        public long C { get; set; }

        [JsonProperty("d")]
        public long D { get; set; }

        [JsonProperty("e")]
        public long E { get; set; }

        [JsonProperty("f")]
        public long F { get; set; }

        [JsonProperty("h")]
        public long H { get; set; }

        [JsonProperty("l")]
        public long L { get; set; }

        [JsonProperty("pc")]
        public long Pc { get; set; }

        [JsonProperty("sp")]
        public long Sp { get; set; }

        [JsonProperty("ime")]
        public long Ime { get; set; }

        [JsonProperty("ram")]
        public long[][] Ram { get; set; }

        [JsonProperty("ie", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ie { get; set; }
    }

    public enum CycleEnum { RM };

    public partial struct CycleElement
    {
        public CycleEnum? Enum;
        public long? Integer;

        public static implicit operator CycleElement(CycleEnum Enum) => new CycleElement { Enum = Enum };
        public static implicit operator CycleElement(long Integer) => new CycleElement { Integer = Integer };
    }

    public partial class Test
    {
        public static Test[] FromJson(string json) => JsonConvert.DeserializeObject<Test[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Test[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CycleElementConverter.Singleton,
                CycleEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CycleElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CycleElement) || t == typeof(CycleElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new CycleElement { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (true)
                    {
                        return new CycleElement { Enum = CycleEnum.RM };
                    }

            }
            throw new Exception("Cannot unmarshal type CycleElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CycleElement)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Enum != null)
            {
                if (value.Enum == CycleEnum.RM)
                {
                    serializer.Serialize(writer, "r-m");
                    return;
                }
            }
            throw new Exception("Cannot marshal type CycleElement");
        }

        public static readonly CycleElementConverter Singleton = new CycleElementConverter();
    }

    internal class CycleEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CycleEnum) || t == typeof(CycleEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (true)
            {
                return CycleEnum.RM;
            }
            throw new Exception("Cannot unmarshal type CycleEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CycleEnum)untypedValue;
            if (value == CycleEnum.RM)
            {
                serializer.Serialize(writer, "r-m");
                return;
            }
            throw new Exception("Cannot marshal type CycleEnum");
        }

        public static readonly CycleEnumConverter Singleton = new CycleEnumConverter();
    }
}